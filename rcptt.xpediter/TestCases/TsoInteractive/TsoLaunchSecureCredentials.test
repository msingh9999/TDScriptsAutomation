--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _eEaF4ER8EeamKrg04Gqe-Q,_ktRQQER8EeamKrg04Gqe-Q,_PprFMER9EeamKrg04Gqe-Q,_l8_BIER7EeamKrg04Gqe-Q,_kRuZMER7EeamKrg04Gqe-Q,_KsdzsHT2Eeao6LAbRG4SEA,_uGGawHT2Eeao6LAbRG4SEA,_pXfDgHICEee33KwN8W2N2w,_aEjwMLjIEeebSNbxTgM6gQ
Element-Name: TsoLaunchSecureCredentials
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _68Gv8OyvEeahS5eQmd5eMA
Runtime-Version: 2.2.0.201706152316
Save-Time: 10/25/17 7:15 AM
Testcase-Type: ecl

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

This test must run in a clean workspace.  i.e. the credentials cannot have already been saved.
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

log "---------------------------------------------- TsoLaunchSecureCredentials ----------------------------------------------"
/****** Global variables ******/

global [val configName InteractiveCobolSession]

/****** Procedures ******/

proc "create-tso-launch-and-execute"
{
	delete-tso-debug-session $configName
	get-menu "Run/Debug Configurations..." | click
	with [get-window "Debug Configurations"] {
	    get-tree | select "Xpediter TSO Debug Session"
	    get-button "New launch configuration" | click
	    with [get-editbox -after [get-label "Name:"]] {
	        set-text InteractiveCobolSession
	    }
	    with [get-group "Program to debug"] {
	        with [get-editbox -after [get-label "Program:"]] {
	            set-text CWXTCOB
	            key-type "TRAVERSE_TAB_NEXT"
	        }
	        with [get-editbox -after [get-label "Parameters:"]] {
	            set-text 00003
	            key-type "TRAVERSE_TAB_NEXT"
	        }
	    }
	    with [get-group "TSO logon parameters" | get-editbox -after [get-label "Procedure:"]] {
	        set-text ATSOEC17
	    }
	    get-tab-folder | get-tab-item "Load Libraries" | click
	    get-group "Load libraries" | get-button "Add..." | click
	    with [get-window Datasets] {
	        get-button "Browse..." | click
	        with [get-window "Dataset Selection"] {
	            with [get-section Datasets] {
	                with [get-editbox -after [get-label "Name:"]] {
	                    set-text "XDEVREG.XPED"
	                    key-type Enter
	                }
	                get-table | select "XDEVREG.XPED.LOADLIB"
	            }
	            get-button OK | click
	        }
	        get-button OK | click
	    }
	    get-tab-folder | get-tab-item DDIO | click
	    get-group "DDIO (Compuware source listing files)" | get-button "Add..." | click
	    with [get-window Datasets] {
	        get-button "Browse..." | click
	        with [get-window "Dataset Selection"] {
	            with [get-section Datasets] {
	                with [get-editbox -after [get-label "Name:"]] {
	                    set-text "XDEVREG.XPED"
	                    key-type Enter
	                }
	                get-table | select "XDEVREG.XPED.DDIO"
	            }
	            get-button OK | click
	        }
	        get-button OK | click
	    }
	    with [get-tab-folder] {
	        get-tab-item "User Files" | click
	    }
	    get-group "Files to allocate" | get-button "Add..." | click
	    with [get-window "File Specifications"] {
	        get-editbox -after [get-label "DD name:"] | set-text EMPFILE
	        get-button "Dataset:" | click
	        get-button "Browse..." | click
	        with [get-window "Dataset Selection"] {
	            with [get-section Datasets] {
	                get-editbox -after [get-label "Name:"] | set-text "XDEVREG.INPUT"
	                get-button List | click
	                get-table | select "XDEVREG.INPUT.CWXTDATB"
	            }
	            get-button OK | click
	        }
	        get-group Disposition | get-combo -after [get-label "Status:"] | select SHR
	        get-button OK | click
	    }
	    get-group "Files to allocate" | get-button "Add..." | click
	    with [get-window "File Specifications"] {
	        get-editbox -after [get-label "DD name:"] | set-text RPTFILE
	        get-combo -after [get-label "DD name:"] | select X
	        get-button OK | click
	    }
	    get-button Debug | click
	}
}

/****** Start up ******/

open-perspective $HOST_EXPLORER
add-filter $FILTER_XDEVREG
with [get-view $HOST_EXPLORER | get-tree] {
	select [format "Hosts/%s:%s/z\\/OS Datasets" $HOST $PORT]
	HE-recall-dataset -filter $FILTER_XDEVREG -dataset "XDEVREG.XPED.LOADLIB" -imagePath $IMAGE_DIR
	HE-recall-dataset -filter $FILTER_XDEVREG -dataset "XDEVREG.XPED.DDIO" -imagePath $IMAGE_DDIO
	HE-recall-dataset -filter $FILTER_XDEVREG -dataset "XDEVREG.INPUT.CWXTDATB" -imagePath $IMAGE_DOCUMENT
}
open-perspective $XPEDITER

/****** Tests ******/

// create a TSO launch config and execute it (should get prompted for login)
create-tso-launch-and-execute

// login and save credentials
handle-login-dialog -saveCredentials true

// handle the possibilty of the secure storage prompt
try -command 
{
	get-window "Secure Storage" | get-button No | click
} 
-catch 
{
}

wait-for-source -pgmName CWXTCOB -lmName CWXTCOB
wait 400

// terminate the launch and launch again (should not get prompted)
clear-all-sessions
wait-for-log $configName
create-tso-launch-and-execute
wait-for-source -pgmName CWXTCOB -lmName CWXTCOB

// remove the credentials
open-perspective $HOST_EXPLORER
get-view "Host Explorer" | get-button "Host Explorer Preferences" | click
with [get-window "Preferences (Filtered)"] {
    get-table | select Ungrouped
    get-button "Edit..." | click
}

with [get-window "Preferences (Filtered)"] {
    with [get-window "Host Connections"] {
        get-tab-folder | get-tab-item Credentials | click
        get-group "Saved Credentials" | get-button "Remove All" | click
        get-window Credentials | get-button Yes | click
        get-button OK | click
    }
    get-button OK | click
}

// terminate the launch and launch again (should get prompted)
open-perspective $XPEDITER
get-button "Terminate (M1+F2)" | click
wait-for-log $configName
create-tso-launch-and-execute

// cancel the login
with [get-window Login] {
    get-button Cancel | click
}

/****** Tear down ******/

close-all-editors

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
